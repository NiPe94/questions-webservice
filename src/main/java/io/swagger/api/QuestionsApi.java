/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Question;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-16T09:21:50.059Z[GMT]")
@Api(value = "questions", description = "the questions API")
public interface QuestionsApi {

    @ApiOperation(value = "", nickname = "deleteQuestionByID", notes = "deletes a single question based on the ID supplied", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "question deleted"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/questions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteQuestionByID(@ApiParam(value = "ID of question to delete",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "findQuestionById", notes = "Returns a question based on a single ID", response = Question.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "question response", response = Question.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/questions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Question> findQuestionById(@ApiParam(value = "ID of question to fetch",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "findQuestions", notes = "Returns all questions from the system ", response = Question.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "question response", response = Question.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/questions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Question>> findQuestions(@ApiParam(value = "tags to filter by") @Valid @RequestParam(value = "tags", required = false) List<String> tags
);

}
